# GitHub Actions Workflow for ML GPU Cluster Infrastructure
# Advanced CI/CD pipeline with matrix builds and parallel execution

name: ML GPU Cluster CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'BICEP/**'
      - 'ENN/**'
      - 'GestureRecognition/**'
      - 'infrastructure/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'BICEP/**'
      - 'ENN/**'
      - 'GestureRecognition/**'
      - 'infrastructure/**'
  schedule:
    # Run nightly security scans at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  # Global environment variables
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.6'
  ANSIBLE_VERSION: '8.5.0'
  
  # Application versions
  BICEP_VERSION: '1.2.3'
  ENN_VERSION: '2.1.0'
  
  # AWS Configuration
  AWS_REGION: us-west-2
  
  # Registry configuration
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ================================
  # VALIDATION AND LINTING
  # ================================
  
  validate:
    name: Validate Infrastructure Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        validation-type: [terraform, ansible, prometheus, yaml]
        include:
          - validation-type: terraform
            path: infrastructure/terraform
          - validation-type: ansible
            path: infrastructure/ansible
          - validation-type: prometheus
            path: infrastructure/monitoring/prometheus
          - validation-type: yaml
            path: infrastructure
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        if: matrix.validation-type == 'terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        if: matrix.validation-type == 'terraform'
        run: |
          cd ${{ matrix.path }}/gpu-cluster
          terraform fmt -check -recursive
      
      - name: Terraform Validate
        if: matrix.validation-type == 'terraform'
        run: |
          cd ${{ matrix.path }}/gpu-cluster
          terraform init -backend=false
          terraform validate
      
      - name: Setup Python for Ansible
        if: matrix.validation-type == 'ansible'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Ansible and Lint Tools
        if: matrix.validation-type == 'ansible'
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }} ansible-lint yamllint
      
      - name: Ansible Lint
        if: matrix.validation-type == 'ansible'
        run: |
          ansible-lint ${{ matrix.path }}/gpu-cluster-setup.yml
          yamllint ${{ matrix.path }}/
      
      - name: Setup Prometheus Tools
        if: matrix.validation-type == 'prometheus'
        run: |
          wget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
          tar xzf prometheus-2.45.0.linux-amd64.tar.gz
          sudo mv prometheus-2.45.0.linux-amd64/promtool /usr/local/bin/
      
      - name: Prometheus Config Validation
        if: matrix.validation-type == 'prometheus'
        run: |
          promtool check config ${{ matrix.path }}/prometheus.yml
          promtool check rules ${{ matrix.path }}/alert-rules.yml
      
      - name: YAML Lint
        if: matrix.validation-type == 'yaml'
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml
          file_or_dir: ${{ matrix.path }}
          strict: false

  # ================================
  # SECURITY SCANNING
  # ================================
  
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    strategy:
      matrix:
        scan-type: [terraform, secrets, dependencies]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Terraform Security Scan
        if: matrix.scan-type == 'terraform'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/terraform
          framework: terraform
          output_format: sarif
          output_file_path: terraform-security.sarif
      
      - name: Upload Terraform Security Results
        if: matrix.scan-type == 'terraform'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: terraform-security.sarif
      
      - name: Secret Detection
        if: matrix.scan-type == 'secrets'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Dependency Security Scan
        if: matrix.scan-type == 'dependencies'
        uses: pypa/gh-action-pip-audit@v1.0.8
        with:
          inputs: requirements.txt BICEP/requirements.txt ENN/requirements.txt
          format: sarif
          output: dependency-security.sarif
      
      - name: Upload Dependency Security Results
        if: matrix.scan-type == 'dependencies'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-security.sarif

  # ================================
  # BUILD AND TEST
  # ================================
  
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [validate]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        project: [BICEP, ENN, GestureRecognition]
        python-version: ['3.10', '3.11']
        include:
          - project: BICEP
            test-command: pytest tests/ -v --cov=src/ --cov-report=xml
            coverage-threshold: 80
          - project: ENN
            test-command: pytest tests/ -v --cov=enn/ --cov-report=xml
            coverage-threshold: 85
          - project: GestureRecognition
            test-command: pytest tests/ -v --cov=src/ --cov-report=xml
            coverage-threshold: 75
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          cd ${{ matrix.project }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-benchmark
      
      - name: Run Unit Tests
        run: |
          cd ${{ matrix.project }}
          ${{ matrix.test-command }}
      
      - name: Check Coverage Threshold
        run: |
          cd ${{ matrix.project }}
          coverage report --fail-under=${{ matrix.coverage-threshold }}
      
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ matrix.project }}/coverage.xml
          flags: ${{ matrix.project }}-python${{ matrix.python-version }}
          name: ${{ matrix.project }}-coverage
          fail_ci_if_error: false

  # ================================
  # CONTAINER BUILDS
  # ================================
  
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [bicep, enn]
        include:
          - service: bicep
            context: ./BICEP
            dockerfile: ./BICEP/Dockerfile
          - service: enn
            context: ./ENN
            dockerfile: ./ENN/Dockerfile
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ matrix.service == 'bicep' && env.BICEP_VERSION || env.ENN_VERSION }}
      
      - name: Build and Push Container
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      
      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: '${{ matrix.service }}-container-security.sarif'
      
      - name: Upload Container Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ matrix.service }}-container-security.sarif'

  # ================================
  # INFRASTRUCTURE DEPLOYMENT
  # ================================
  
  plan-infrastructure:
    name: Plan Infrastructure Changes
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        environment: [development, production]
        exclude:
          - environment: production
        include:
          - environment: production
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform/gpu-cluster
          terraform init
      
      - name: Terraform Plan
        id: plan
        run: |
          cd infrastructure/terraform/gpu-cluster
          terraform plan -var="environment=${{ matrix.environment }}" -out=${{ matrix.environment }}.tfplan
          terraform show -no-color ${{ matrix.environment }}.tfplan > ${{ matrix.environment }}-plan.txt
      
      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: |
            infrastructure/terraform/gpu-cluster/${{ matrix.environment }}.tfplan
            infrastructure/terraform/gpu-cluster/${{ matrix.environment }}-plan.txt
          retention-days: 7
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('infrastructure/terraform/gpu-cluster/${{ matrix.environment }}-plan.txt', 'utf8');
            
            const comment = `## Terraform Plan - ${{ matrix.environment }}
            
            <details>
            <summary>Click to expand plan output</summary>
            
            \`\`\`terraform
            ${planOutput}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [plan-infrastructure, build-containers]
    if: github.ref == 'refs/heads/main' || inputs.environment
    
    environment: 
      name: ${{ inputs.environment || 'production' }}
      url: https://ml-cluster.internal
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download Plan Artifacts
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ inputs.environment || 'production' }}
          path: infrastructure/terraform/gpu-cluster/
      
      - name: Terraform Apply
        run: |
          cd infrastructure/terraform/gpu-cluster
          terraform init
          terraform apply -auto-approve ${{ inputs.environment || 'production' }}.tfplan
          terraform output -json > ../../../terraform-outputs.json
      
      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: terraform-outputs.json
          retention-days: 30

  # ================================
  # CONFIGURATION MANAGEMENT
  # ================================
  
  configure-infrastructure:
    name: Configure Infrastructure with Ansible
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || inputs.environment
    
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Ansible
        run: |
          pip install ansible==${{ env.ANSIBLE_VERSION }} boto3 botocore
      
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      
      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
      
      - name: Run Ansible Playbook
        run: |
          cd infrastructure/ansible
          ansible-playbook -i inventory/gpu-cluster.yml gpu-cluster-setup.yml \
            --extra-vars "environment=${{ inputs.environment || 'production' }}" \
            --extra-vars "@../../terraform-outputs.json"
      
      - name: Verify Configuration
        run: |
          cd infrastructure/ansible
          ansible all -i inventory/gpu-cluster.yml -m ping

  # ================================
  # INTEGRATION TESTING
  # ================================
  
  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [configure-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    strategy:
      matrix:
        test-suite: [api, gpu-cluster, ml-services]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Test Dependencies
        run: |
          pip install pytest requests boto3
      
      - name: Run Integration Tests
        run: |
          python -m pytest tests/integration/test_${{ matrix.test-suite }}.py -v
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ matrix.test-suite }}
          path: test-results-${{ matrix.test-suite }}.xml

  # ================================
  # NOTIFICATIONS AND CLEANUP
  # ================================
  
  notify-completion:
    name: Notify Deployment Completion
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ml-infrastructure'
          username: 'GitHub Actions'
          icon_emoji: ':robot_face:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            ML GPU Cluster Pipeline Completed!
            Environment: Production
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Teams Notification
        if: failure()
        uses: skitionek/notify-microsoft-teams@master
        with:
          webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}

  # ================================
  # SCHEDULED MAINTENANCE
  # ================================
  
  scheduled-maintenance:
    name: Scheduled Maintenance Tasks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        task: [security-scan, dependency-update, backup-state]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Security Scan
        if: matrix.task == 'security-scan'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
      
      - name: Dependency Update
        if: matrix.task == 'dependency-update'
        run: |
          pip install pip-tools
          find . -name "requirements.in" -exec pip-compile --upgrade {} \;
      
      - name: Backup Terraform State
        if: matrix.task == 'backup-state'
        run: |
          aws s3 cp terraform.tfstate s3://ml-infrastructure-backups/terraform/$(date +%Y-%m-%d)/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}